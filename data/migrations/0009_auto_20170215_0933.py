# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-15 09:33
from __future__ import unicode_literals

from django.db import migrations

def populate_subreddit_events(apps, schema_editor):
    SubredditQuery = apps.get_model('data', 'SubredditQuery')
    Subreddit = apps.get_model('data', 'Subreddit')
    SubredditEvent = apps.get_model('data', 'SubredditEvent')
    SubredditEventDetail = apps.get_model('data', 'SubredditEventDetail')
    User = apps.get_model('data', 'User')

    for sub in Subreddit.objects.all():
        print('Populating subreddit events for  ' + sub.name)
        queries = SubredditQuery.objects.filter(sub=sub).order_by('time')


        first = queries[0]
        new_event = SubredditEvent(sub=sub, recorded=first.time, new=True)
        new_event.save()

        relations = []
        temporal_mods = set()
        for mod in first.mods.all():
            relations.append(SubredditEventDetail(event=new_event, user=mod, addition=True))
            temporal_mods.add(mod.username)
        SubredditEventDetail.objects.bulk_create(relations)

        relations = []
        prev_check = first.time
        for query in queries[1:]:
            mods = set([m.username for m in query.prev.mods.all()])

            if len(mods) == 0:
                continue
                
            additions = mods - temporal_mods
            removals = temporal_mods - mods

            if len(additions) > 0 or len(removals) > 0:
                event = SubredditEvent(sub=sub, recorded=query.time, previous_check=prev_check, new=False)
                event.save()

                if len(additions) > 0:
                    print('Added: ' + str(additions))
                    for mod in additions:
                        user_query = User.objects.get(username=mod)
                        relations.append(SubredditEventDetail(event=event, user=user_query, addition=True))

                if len(removals) > 0:
                    print('Removed: ' + str(removals))
                    for mod in removals:
                        user_query = User.objects.get(username=mod)
                        relations.append(SubredditEventDetail(event=event, user=user_query, addition=False))

            temporal_mods = mods
            prev_check = query.time
        SubredditEventDetail.objects.bulk_create(relations)

class Migration(migrations.Migration):

    dependencies = [
        ('data', '0008_auto_20170215_0932'),
    ]

    operations = [
        migrations.RunPython(populate_subreddit_events)
    ]
